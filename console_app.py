import json
from rental_service.property_factory import PropertyFactory
from rental_service.client_base import Tenant
from rental_service.rental_agreement import RentalAgreement
from rental_service.mixins import LoggingMixin, NotificationMixin


class RentalApp(LoggingMixin, NotificationMixin):
    def __init__(self):
        self.properties = []
        self.tenants = []
        self.agreements = []

    # --- –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å—é ---
    def create_property(self):
        print("\nüì¶ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        property_type = input("–¢–∏–ø (apartment/house/commercialspace): ").strip().lower()
        try:
            kwargs = {
                "property_id": len(self.properties) + 1,
                "address": input("–ê–¥—Ä–µ—Å: "),
                "area": float(input("–ü–ª–æ—â–∞–¥—å (–∫–≤.–º): ")),
                "monthly_rate": float(input("–ú–µ—Å—è—á–Ω–∞—è —Å—Ç–∞–≤–∫–∞: ")),
                "is_available": True
            }

            if property_type == "apartment":
                kwargs["number_of_rooms"] = int(input("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç: "))
            elif property_type == "house":
                kwargs["has_garden"] = input("–ï—Å—Ç—å —Å–∞–¥? (y/n): ").lower() == "y"
            elif property_type == "commercialspace":
                kwargs["business_type"] = input("–¢–∏–ø –±–∏–∑–Ω–µ—Å–∞: ")

            prop = PropertyFactory.create_property(property_type, **kwargs)
            self.properties.append(prop)
            self.log_action(f"–î–æ–±–∞–≤–ª–µ–Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å: {prop.address}")
            print("‚úÖ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞!\n")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def list_properties(self):
        print("\nüè† –°–ø–∏—Å–æ–∫ –≤—Å–µ–π –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏:")
        if not self.properties:
            print("–ù–µ—Ç –æ–±—ä–µ–∫—Ç–æ–≤.")
        for p in self.properties:
            print(f"- {p}")
        print()

    def search_property(self):
        query = input("\nüîç –í–≤–µ–¥–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞: ").strip().lower()
        found = [p for p in self.properties if query in p.address.lower()]
        if found:
            print("–ù–∞–π–¥–µ–Ω–æ:")
            for p in found:
                print(f"- {p}")
        else:
            print("‚ùå –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        print()

    def edit_property(self):
        try:
            pid = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: "))
            prop = next((p for p in self.properties if p.property_id == pid), None)
            if not prop:
                print("‚ùå –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
                return

            print(f"–†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º {prop.address}")
            prop.monthly_rate = float(input("–ù–æ–≤–∞—è —Å—Ç–∞–≤–∫–∞ (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {0}): ".format(prop.monthly_rate)))
            prop.area = float(input("–ù–æ–≤–∞—è –ø–ª–æ—â–∞–¥—å (—Ç–µ–∫—É—â–µ–µ –∑–Ω–∞—á–µ–Ω–∏–µ {0}): ".format(prop.area)))
            self.log_action(f"–ò–∑–º–µ–Ω–µ–Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å ID={pid}")
            print("‚úÖ –ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!\n")

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def delete_property(self):
        try:
            pid = int(input("\n–í–≤–µ–¥–∏—Ç–µ ID –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è: "))
            self.properties = [p for p in self.properties if p.property_id != pid]
            self.log_action(f"–£–¥–∞–ª–µ–Ω–∞ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å ID={pid}")
            print("‚úÖ –ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞!\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def analyze_properties(self):
        print("\nüìä –ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏")
        if not self.properties:
            print("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞.")
            return
        most_expensive = max(self.properties, key=lambda p: p.monthly_rate)
        cheapest = min(self.properties, key=lambda p: p.monthly_rate)
        print(f"üí∞ –°–∞–º–∞—è –¥–æ—Ä–æ–≥–∞—è: {most_expensive.address} ‚Äî {most_expensive.monthly_rate} —Ä—É–±/–º–µ—Å")
        print(f"ü™ô –°–∞–º–∞—è –¥–µ—à—ë–≤–∞—è: {cheapest.address} ‚Äî {cheapest.monthly_rate} —Ä—É–±/–º–µ—Å\n")

    # --- –†–∞–±–æ—Ç–∞ —Å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞–º–∏ –∏ –∞—Ä–µ–Ω–¥–æ–π ---
    def create_tenant(self):
        print("\nüë§ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞")
        try:
            tenant = Tenant(
                tenant_id=len(self.tenants) + 1,
                name=input("–ò–º—è: "),
                email=input("Email: "),
                phone=input("–¢–µ–ª–µ—Ñ–æ–Ω: ")
            )
            self.tenants.append(tenant)
            self.log_action(f"–î–æ–±–∞–≤–ª–µ–Ω –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä: {tenant.name}")
            print("‚úÖ –ê—Ä–µ–Ω–¥–∞—Ç–æ—Ä —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")

    def create_agreement(self):
        print("\nüßæ –°–æ–∑–¥–∞–Ω–∏–µ –¥–æ–≥–æ–≤–æ—Ä–∞ –∞—Ä–µ–Ω–¥—ã")
        if not self.properties or not self.tenants:
            print("‚ùå –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å –∏ –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞.")
            return

        pid = int(input("ID –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏: "))
        tid = int(input("ID –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞: "))
        prop = next((p for p in self.properties if p.property_id == pid), None)
        tenant = next((t for t in self.tenants if t.tenant_id == tid), None)

        if not prop or not tenant:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π ID.")
            return

        agreement = RentalAgreement(
            agreement_id=len(self.agreements) + 1,
            tenant=tenant,
            property_=prop,
            start_date=input("–î–∞—Ç–∞ –Ω–∞—á–∞–ª–∞ (YYYY-MM-DD): "),
            end_date=input("–î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è (YYYY-MM-DD): ")
        )
        self.agreements.append(agreement)
        agreement.log_action("–°–æ–∑–¥–∞–Ω –Ω–æ–≤—ã–π –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã")
        agreement.send_notification("–ê—Ä–µ–Ω–¥–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞")
        try:
            months = int(input("–í–≤–µ–¥–∏—Ç–µ —Å—Ä–æ–∫ –∞—Ä–µ–Ω–¥—ã –≤ –º–µ—Å—è—Ü–∞—Ö: "))
            total = agreement.calculate_total(months)
            print(f"‚úÖ –î–æ–≥–æ–≤–æ—Ä —Å–æ–∑–¥–∞–Ω. –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total:.2f} —Ä—É–±.\n")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏: {e}")


    # --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
    def run(self):
        while True:
            print("""
===========================
     –°–ï–†–í–ò–° –ê–†–ï–ù–î–´ –ñ–ò–õ–¨–Ø
===========================
1. –î–æ–±–∞–≤–∏—Ç—å –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å
2. –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ –æ–±—ä–µ–∫—Ç—ã
3. –ü–æ–∏—Å–∫ –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç–∏
4. –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –æ–±—ä–µ–∫—Ç
5. –£–¥–∞–ª–∏—Ç—å –æ–±—ä–µ–∫—Ç
6. –ê–Ω–∞–ª–∏–∑ (–¥–æ—Ä–æ–≥–∞—è/–¥–µ—à—ë–≤–∞—è)
7. –î–æ–±–∞–≤–∏—Ç—å –∞—Ä–µ–Ω–¥–∞—Ç–æ—Ä–∞
8. –°–æ–∑–¥–∞—Ç—å –¥–æ–≥–æ–≤–æ—Ä –∞—Ä–µ–Ω–¥—ã
0. –í—ã—Ö–æ–¥
""")
            choice = input("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ: ").strip()

            if choice == "1":
                self.create_property()
            elif choice == "2":
                self.list_properties()
            elif choice == "3":
                self.search_property()
            elif choice == "4":
                self.edit_property()
            elif choice == "5":
                self.delete_property()
            elif choice == "6":
                self.analyze_properties()
            elif choice == "7":
                self.create_tenant()
            elif choice == "8":
                self.create_agreement()
            elif choice == "0":
                print("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
                break
            else:
                print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.\n")


if __name__ == "__main__":
    app = RentalApp()
    app.run()
